{
	"info": {
		"name": "LibraryAPI",
		"_postman_id": "bbbc973c-019c-82cb-2636-9eaa54863786",
		"description": "Integration tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users CRUD",
			"description": "",
			"item": [
				{
					"name": "Get all users",
					"description": "",
					"item": [
						{
							"name": "Get all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Get all users pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct item array size\"] = jsonBody.items.length === 10;",
											"tests[\"Response body has correct first item\"] = jsonBody.items[0].id === 11;",
											"tests[\"Response body has correct last item\"] = jsonBody.items[jsonBody.items.length-1].id === 20;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.paging.pageNumber === 2;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.paging.pageMaxSize === 10;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users?pageNumber=2&pageSize=10",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									],
									"query": [
										{
											"equals": true,
											"key": "pageNumber",
											"value": "2"
										},
										{
											"equals": true,
											"key": "pageSize",
											"value": "10"
										}
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Add user",
					"description": "",
					"item": [
						{
							"name": "Create user (only name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create user (only email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Email\": \"user@postman.com\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create user (invalid email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"not a valid email\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create user (correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"    \"name\": \"Postman User\",",
											"    \"email\": \"user@postman\" + pm.environment.get(\"randomNum\") + \".com\",",
											"    \"address\": \"123 Postman\"",
											"}",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;",
											"",
											"pm.environment.set(\"userID\", jsonBody.id);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"randomNum\", Math.floor(Math.random() * 1000000));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create user (already exists)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 409\"] = responseCode.code === 409;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User with that email already exists\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get user",
					"description": "",
					"item": [
						{
							"name": "Get created user (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get created user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"    \"name\": \"Postman User\",",
											"    \"email\": \"user@postman\" + pm.environment.get(\"randomNum\") + \".com\",",
											"    \"address\": \"123 Postman\"",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Fully update user",
					"description": "",
					"item": [
						{
							"name": "Fully update user (only name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update user (only email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Email\": \"user@postman.com\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update user (invalid email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User PUT\",\n  \"Email\": \"invalid PUT email\",\n  \"Address\": \"123 PostmanPUT\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update user (correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User PUT\",\n  \"Email\": \"user@postmanPUT{{randomNum}}.com\",\n  \"Address\": \"123 Postman PUT\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update user (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User PUT\",\n  \"Email\": \"user@postmanPUT{{randomNum}}.com\",\n  \"Address\": \"123 Postman PUT\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify full update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"    \"name\": \"Postman User PUT\",",
											"    \"email\": \"user@postmanPUT\" + pm.environment.get(\"randomNum\") + \".com\",",
											"    \"address\": \"123 Postman PUT\"",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Partially update user",
					"description": "",
					"item": [
						{
							"name": "Partially update user (invalid email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Email\": \"invalid PATCH email\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update user (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update user (only name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User PATCH\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify partial update (name)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"    \"name\": \"Postman User PATCH\",",
											"    \"email\": \"user@postmanPUT\" + pm.environment.get(\"randomNum\") + \".com\",",
											"    \"address\": \"123 Postman PUT\"",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update user (only email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"randomNum\", Math.floor(Math.random() * 1000000));"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Email\": \"user@postmanPATCH{{randomNum}}.com\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify partial update (email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"    \"name\": \"Postman User PATCH\",",
											"    \"email\": \"user@postmanPATCH\" + pm.environment.get(\"randomNum\") + \".com\",",
											"    \"address\": \"123 Postman PUT\"",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update user (empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify partial update (no change)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"    \"name\": \"Postman User PATCH\",",
											"    \"email\": \"user@postmanPATCH\" + pm.environment.get(\"randomNum\") + \".com\",",
											"    \"address\": \"123 Postman PUT\"",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update user (full)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"randomNum\", Math.floor(Math.random() * 1000000));"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User PATCH FULL\",\n  \"Email\": \"user@postmanPATCHFULL{{randomNum}}.com\",\n  \"Address\": \"123 Postman PATCH FULL\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify partial update (full)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"    \"name\": \"Postman User PATCH FULL\",",
											"    \"email\": \"user@postmanPATCHFULL\" + pm.environment.get(\"randomNum\") + \".com\",",
											"    \"address\": \"123 Postman PATCH FULL\"",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete user",
					"description": "",
					"item": [
						{
							"name": "Delete user (correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete user (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Books CRUD",
			"description": "",
			"item": [
				{
					"name": "Get all books",
					"description": "",
					"item": [
						{
							"name": "Get all books",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Get all books pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct item array size\"] = jsonBody.items.length === 10;",
											"tests[\"Response body has correct first item\"] = jsonBody.items[0].id === 11;",
											"tests[\"Response body has correct last item\"] = jsonBody.items[jsonBody.items.length-1].id === 20;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.paging.pageNumber === 2;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.paging.pageMaxSize === 10;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/books?pageNumber=2&pageSize=10",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "2",
											"equals": true
										},
										{
											"key": "pageSize",
											"value": "10",
											"equals": true
										}
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Add book",
					"description": "",
					"item": [
						{
							"name": "Create book (only title)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Postman title\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create book (only author)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"author\": \"Postman author\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create book (only date)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"publishDate\": \"1963-05-22T00:00:00\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create book (only ISBN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isbn\": \"069235597-9\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create book (correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman title\",",
											"    \"author\": \"Postman author\",",
											"    \"publishDate\": \"1963-05-22T00:00:00\",",
											"    \"isbn\": \"069235597-9\" + pm.environment.get(\"randomNum\")",
											"}",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;",
											"",
											"pm.environment.set(\"bookID\", jsonBody.id);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"randomNum\", Math.floor(Math.random() * 1000000));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Postman title\",\n    \"author\": \"Postman author\",\n    \"publishDate\": \"1963-05-22T00:00:00\",\n    \"isbn\": \"069235597-9{{randomNum}}\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create book (already exists)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 409\"] = responseCode.code === 409;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book with that ISBN already exists\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Postman title\",\n    \"author\": \"Postman author\",\n    \"publishDate\": \"1963-05-22T00:00:00\",\n    \"isbn\": \"069235597-9{{randomNum}}\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get book",
					"description": "",
					"item": [
						{
							"name": "Get created book (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get created book",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman title\",",
											"    \"author\": \"Postman author\",",
											"    \"publishDate\": \"1963-05-22T00:00:00\",",
											"    \"isbn\": \"069235597-9\" + pm.environment.get(\"randomNum\")",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Fully update user",
					"description": "",
					"item": [
						{
							"name": "Fully update book (only title)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Postman title PUT\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update book (only author)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"author\": \"Postman author PUT\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update book (only date)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"publishDate\": \"1963-05-22T00:00:00\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update book (only ISBN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isbn\": \"069235597-0{{randomNum}}\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update book (correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Postman title PUT\",\n    \"author\": \"Postman author PUT\",\n    \"publishDate\": \"2000-05-22T00:00:00\",\n    \"isbn\": \"069235597-0{{randomNum}}\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update book (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Postman title PUT\",\n    \"author\": \"Postman author PUT\",\n    \"publishDate\": \"2000-05-22T00:00:00\",\n    \"isbn\": \"069235597-0{{randomNum}}\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify full update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman title PUT\",",
											"    \"author\": \"Postman author PUT\",",
											"    \"publishDate\": \"2000-05-22T00:00:00\",",
											"    \"isbn\": \"069235597-0\" + pm.environment.get(\"randomNum\")",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Partially update user",
					"description": "",
					"item": [
						{
							"name": "Partially update book (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update book (only title)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"title\": \"Postman title PATCH\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify partial update (title)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman title PATCH\",",
											"    \"author\": \"Postman author PUT\",",
											"    \"publishDate\": \"2000-05-22T00:00:00\",",
											"    \"isbn\": \"069235597-0\" + pm.environment.get(\"randomNum\")",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update book (only author)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"author\": \"Postman author PATCH\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify partial update (author)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman title PATCH\",",
											"    \"author\": \"Postman author PATCH\",",
											"    \"publishDate\": \"2000-05-22T00:00:00\",",
											"    \"isbn\": \"069235597-0\" + pm.environment.get(\"randomNum\")",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update book (only date)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"publishDate\": \"2000-01-01T00:00:00\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify partial update (date)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman title PATCH\",",
											"    \"author\": \"Postman author PATCH\",",
											"    \"publishDate\": \"2000-01-01T00:00:00\",",
											"    \"isbn\": \"069235597-0\" + pm.environment.get(\"randomNum\")",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update book (only ISBN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isbn\": \"000000000-0{{randomNum}}\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify partial update (ISBN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman title PATCH\",",
											"    \"author\": \"Postman author PATCH\",",
											"    \"publishDate\": \"2000-01-01T00:00:00\",",
											"    \"isbn\": \"000000000-0\" + pm.environment.get(\"randomNum\")",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update book (empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify partial update (no change)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman title PATCH\",",
											"    \"author\": \"Postman author PATCH\",",
											"    \"publishDate\": \"2000-01-01T00:00:00\",",
											"    \"isbn\": \"000000000-0\" + pm.environment.get(\"randomNum\")",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update book (full)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Postman title PATCH FULL\",\n    \"author\": \"Postman author PATCH FULL\",\n    \"publishDate\": \"2069-04-20T00:00:00\",\n    \"isbn\": \"696969696-9{{randomNum}}\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify partial update (full)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman title PATCH FULL\",",
											"    \"author\": \"Postman author PATCH FULL\",",
											"    \"publishDate\": \"2069-04-20T00:00:00\",",
											"    \"isbn\": \"696969696-9\" + pm.environment.get(\"randomNum\")",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete book",
					"description": "",
					"item": [
						{
							"name": "Delete book (correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete user (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "User Reviews CRUD",
			"description": "",
			"item": [
				{
					"name": "Add user and book",
					"description": "",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"  \"name\": \"Postman Review User\",",
											"  \"email\": \"reviewuser@postman\" + pm.environment.get(\"randomNum\") + \".com\",",
											"  \"address\": \"123 Postman Review\"",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;",
											"",
											"pm.environment.set(\"userID\", jsonBody.id);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"randomNum\", Math.floor(Math.random() * 1000000));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman Review User\",\n  \"Email\": \"reviewuser@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman Review\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create book",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman review title\",",
											"    \"author\": \"Postman review author\",",
											"    \"publishDate\": \"1963-05-22T00:00:00\",",
											"    \"isbn\": \"069235597-9\" + pm.environment.get(\"randomNum\")",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;",
											"",
											"pm.environment.set(\"bookID\", jsonBody.id);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"randomNum\", Math.floor(Math.random() * 1000000));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Postman review title\",\n    \"author\": \"Postman review author\",\n    \"publishDate\": \"1963-05-22T00:00:00\",\n    \"isbn\": \"069235597-9{{randomNum}}\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get all reviews by user (empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response should have empty items in pagination\"] = jsonBody.items.length === 0;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Add review",
					"description": "",
					"item": [
						{
							"name": "Create review (user not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Rating\": 5\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/0/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"0",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review (book not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Rating\": 5\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review (empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review (invalid rating)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Rating\": \"invalid\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"user\": {",
											"        \"id\": parseInt(pm.environment.get(\"userID\"))",
											"    },",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"rating\": 5",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct user\"] = jsonBody.user.id === expectedResponse.user.id;",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 5\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review (already exists)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 409\"] = responseCode.code === 409;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Review already exists\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 5\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Add multiple reviews",
					"description": "",
					"item": [
						{
							"name": "Create review 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"user\": {",
											"        \"id\": parseInt(pm.environment.get(\"userID\"))",
											"    },",
											"    \"book\": {",
											"        \"id\": 1",
											"    },",
											"    \"rating\": 1",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct user\"] = jsonBody.user.id === expectedResponse.user.id;",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 1\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"1"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"user\": {",
											"        \"id\": parseInt(pm.environment.get(\"userID\"))",
											"    },",
											"    \"book\": {",
											"        \"id\": 2",
											"    },",
											"    \"rating\": 2",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct user\"] = jsonBody.user.id === expectedResponse.user.id;",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 2\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"2"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"user\": {",
											"        \"id\": parseInt(pm.environment.get(\"userID\"))",
											"    },",
											"    \"book\": {",
											"        \"id\": 3",
											"    },",
											"    \"rating\": 3",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct user\"] = jsonBody.user.id === expectedResponse.user.id;",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 3\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"3"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"user\": {",
											"        \"id\": parseInt(pm.environment.get(\"userID\"))",
											"    },",
											"    \"book\": {",
											"        \"id\": 4",
											"    },",
											"    \"rating\": 4",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct user\"] = jsonBody.user.id === expectedResponse.user.id;",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 4\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"4"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get all reviews for user",
					"description": "",
					"item": [
						{
							"name": "Get reviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response should have 5 items in pagination\"] = jsonBody.items.length === 5;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Get reviews pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct item array size\"] = jsonBody.items.length === 2;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.paging.pageNumber === 2;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.paging.pageMaxSize === 3;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews?pageNumber=2&pageSize=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "2",
											"equals": true
										},
										{
											"key": "pageSize",
											"value": "3",
											"equals": true
										}
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get review",
					"description": "",
					"item": [
						{
							"name": "Get review (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Review not found\";"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/100",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"100"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get review (book not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get review (user not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/0/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"0",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get review",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"rating\": 5",
											"};",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Fully update review",
					"description": "",
					"item": [
						{
							"name": "Fully update review (empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update review (invalid rating)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": \"invalid\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update review (correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 1\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update review (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Review not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 0\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/100",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"100"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update review (user not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 0\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/0/reviews/100",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"0",
										"reviews",
										"100"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update review (book not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 0\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify full update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"rating\": 1",
											"};",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Partially update review",
					"description": "",
					"item": [
						{
							"name": "Partially update review (empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify partial update (no change)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"rating\": 1",
											"};",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update review (invalid rating)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": \"invalid\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update review (correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 4\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update review (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Review not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 0\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/50",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"50"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update review (user not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 0\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/0/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"0",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update review (book not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 0\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify partial update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"rating\": 4",
											"};",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete review",
					"description": "",
					"item": [
						{
							"name": "Delete review (correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete review (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Review not found\";"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete review (user not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/0/reviews/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"0",
										"reviews",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete review (book not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete user and book",
					"description": "",
					"item": [
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete book",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Book Reviews CRUD",
			"description": "",
			"item": [
				{
					"name": "Add user and book",
					"description": "",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"  \"name\": \"Postman Review User\",",
											"  \"email\": \"reviewuser@postman\" + pm.environment.get(\"randomNum\") + \".com\",",
											"  \"address\": \"123 Postman Review\"",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;",
											"",
											"pm.environment.set(\"userID\", jsonBody.id);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"randomNum\", Math.floor(Math.random() * 1000000));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman Review User\",\n  \"Email\": \"reviewuser@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman Review\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create book",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman review title\",",
											"    \"author\": \"Postman review author\",",
											"    \"publishDate\": \"1963-05-22T00:00:00\",",
											"    \"isbn\": \"069235597-9\" + pm.environment.get(\"randomNum\")",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;",
											"",
											"pm.environment.set(\"bookID\", jsonBody.id);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"randomNum\", Math.floor(Math.random() * 1000000));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Postman review title\",\n    \"author\": \"Postman review author\",\n    \"publishDate\": \"1963-05-22T00:00:00\",\n    \"isbn\": \"069235597-9{{randomNum}}\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get review by user for book (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response should have correct message\"] = jsonBody.message === \"Review not found\";"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Get review for book (empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response should have empty items list\"] = jsonBody.items.length === 0;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Add review",
					"description": "",
					"item": [
						{
							"name": "Create review (user not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Rating\": 5\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review (book not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Rating\": 5\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/0/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"0",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review (empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review (invalid rating)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Rating\": \"invalid\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"user\": {",
											"        \"id\": parseInt(pm.environment.get(\"userID\"))",
											"    },",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"rating\": 5",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct user\"] = jsonBody.user.id === expectedResponse.user.id;",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 5\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review (already exists)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 409\"] = responseCode.code === 409;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Review already exists\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 5\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Add multiple reviews",
					"description": "",
					"item": [
						{
							"name": "Create review 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"user\": {",
											"        \"id\": 1",
											"    },",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"rating\": 1",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct user\"] = jsonBody.user.id === expectedResponse.user.id;",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 1\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"1"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"user\": {",
											"        \"id\": 2",
											"    },",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"rating\": 2",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct user\"] = jsonBody.user.id === expectedResponse.user.id;",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 2\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"2"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"user\": {",
											"        \"id\": 3",
											"    },",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"rating\": 3",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct user\"] = jsonBody.user.id === expectedResponse.user.id;",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 3\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"3"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"user\": {",
											"        \"id\": 4",
											"    },",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"rating\": 4",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct user\"] = jsonBody.user.id === expectedResponse.user.id;",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 4\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"4"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get all reviews",
					"description": "",
					"item": [
						{
							"name": "Get all reviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response should have at least 1 item in pagination\"] = jsonBody.items.length >= 1;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/reviews",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"reviews"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Get all reviews pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct item array size\"] = jsonBody.items.length >= 0;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.paging.pageNumber === 2;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.paging.pageMaxSize === 3;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/reviews?pageNumber=2&pageSize=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"reviews"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "2",
											"equals": true
										},
										{
											"key": "pageSize",
											"value": "3",
											"equals": true
										}
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get all reviews for book",
					"description": "",
					"item": [
						{
							"name": "Get reviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response should have 5 items in pagination\"] = jsonBody.items.length === 5;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Get reviews pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct item array size\"] = jsonBody.items.length === 2;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.paging.pageNumber === 2;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.paging.pageMaxSize === 3;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews?pageNumber=2&pageSize=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "2",
											"equals": true
										},
										{
											"key": "pageSize",
											"value": "3",
											"equals": true
										}
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get review",
					"description": "",
					"item": [
						{
							"name": "Get review (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Review not found\";"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/100",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"100"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get review (user not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get review (book not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/0/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"0",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get review",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"rating\": 5",
											"};",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Fully update review",
					"description": "",
					"item": [
						{
							"name": "Fully update review (empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update review (invalid rating)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": \"invalid\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update review (correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 1\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update review (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Review not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 0\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/50",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"50"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update review (user not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 0\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update review (book not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 0\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/0/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"0",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify full update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"user\": {",
											"        \"id\": parseInt(pm.environment.get(\"userID\"))",
											"    },",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"rating\": 1",
											"};",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct user\"] = jsonBody.user.id === expectedResponse.user.id;",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Partially update review",
					"description": "",
					"item": [
						{
							"name": "Partially update review (empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify partial update (no change)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"user\": {",
											"        \"id\": parseInt(pm.environment.get(\"userID\"))",
											"    },",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"rating\": 1",
											"};",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct user\"] = jsonBody.user.id === expectedResponse.user.id;",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update review (invalid rating)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": \"invalid\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update review (correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 4\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update review (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Review not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 0\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/50",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"50"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update review (user not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 0\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update review (book not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rating\": 0\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/0/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"0",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify partial update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedResponse = {",
											"    \"user\": {",
											"        \"id\": parseInt(pm.environment.get(\"userID\"))",
											"    },",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"rating\": 4",
											"};",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct user\"] = jsonBody.user.id === expectedResponse.user.id;",
											"tests[\"Response body has correct book\"] = jsonBody.book.id === expectedResponse.book.id;",
											"tests[\"Response body has correct rating\"] = jsonBody.rating === expectedResponse.rating;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete review",
					"description": "",
					"item": [
						{
							"name": "Delete review (correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete review (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Review not found\";"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete review (user not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}/reviews/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}",
										"reviews",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete review (book not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/0/reviews/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"0",
										"reviews",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete user and book",
					"description": "",
					"item": [
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete book",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Loans CRUD",
			"description": "",
			"item": [
				{
					"name": "Add user and book",
					"description": "",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"  \"name\": \"Postman Loan User\",",
											"  \"email\": \"loanuser@postman\" + pm.environment.get(\"randomNum\") + \".com\",",
											"  \"address\": \"123 Postman Loan\"",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;",
											"",
											"pm.environment.set(\"userID\", jsonBody.id);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"randomNum\", Math.floor(Math.random() * 1000000));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman Loan User\",\n  \"Email\": \"loanuser@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman Loan\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create book",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman loan title\",",
											"    \"author\": \"Postman loan author\",",
											"    \"publishDate\": \"1963-05-22T00:00:00\",",
											"    \"isbn\": \"069235597-9\" + pm.environment.get(\"randomNum\")",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;",
											"",
											"pm.environment.set(\"bookID\", jsonBody.id);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"randomNum\", Math.floor(Math.random() * 1000000));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Postman loan title\",\n    \"author\": \"Postman loan author\",\n    \"publishDate\": \"1963-05-22T00:00:00\",\n    \"isbn\": \"069235597-9{{randomNum}}\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get book loans for user (empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response should have empty items list\"] = jsonBody.items.length === 0;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Add loan",
					"description": "",
					"item": [
						{
							"name": "Add loan (user not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/0/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"0",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan (book not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan (correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan (already exists)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 409\"] = responseCode.code === 409;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User already has book loaned\";"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response should have non-empty items list\"] = jsonBody.items.length === 1;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Return book (Delete)",
					"description": "",
					"item": [
						{
							"name": "Return book (user not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/0/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"0",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Return book (book not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Return book (correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Return book (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User does not have the book loaned\";"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Fully update loan",
					"description": "",
					"item": [
						{
							"name": "Add loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update loan (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User does not have the book loaned\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": \"2000-01-01\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"1"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update loan (user not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": \"2000-01-01\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/0/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"0",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update loan (book not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": \"2000-01-01\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update loan (only returndate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"returnDate\": \"2001-01-01\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update loan (invalid loandate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": \"invalid date\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update loan (invalid returndate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"returnDate\": \"invalid date\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update loan (null loanDate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": null\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update loan (empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update loan (only loandate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"LoanDate\": \"2000-01-01\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify full update (loan date)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedLoan = {",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"loanDate\": \"2000-01-01T00:00:00\",",
											"    \"returnDate\": null",
											"};",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response should have non-empty items list\"] = jsonBody.items.length === 1;",
											"tests[\"Response should have correct book\"] = jsonBody.items[0].book.id === expectedLoan.book.id;",
											"tests[\"Response should have correct loan date\"] = jsonBody.items[0].loanDate === expectedLoan.loanDate;",
											"tests[\"Response should have correct return date\"] = jsonBody.items[0].returnDate === expectedLoan.returnDate;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update loan (both, nonsense)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 409\"] = responseCode.code === 409;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response should have correct message\"] = jsonBody.message === \"Loan date must be before the return date\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": \"2008-02-02\",\n\t\"returnDate\": \"2003-03-03\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update loan (both, correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": \"2002-02-02\",\n\t\"returnDate\": \"2003-03-03\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify full update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has empty items\"] = jsonBody.items.length === 0;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Fully update loan (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User does not have the book loaned\";"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": \"2002-02-02\",\n\t\"returnDate\": null\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Partially update loan",
					"description": "",
					"item": [
						{
							"name": "Add loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update loan (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User does not have the book loaned\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": \"2000-01-01\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"1"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update loan (user not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": \"2000-01-01\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/0/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"0",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update loan (book not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Book not found\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": \"2000-01-01\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"0"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update loan (only returndate, nonsense)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 409\"] = responseCode.code === 409;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response should have correct message\"] = jsonBody.message === \"Loan date must be before the return date\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"returnDate\": \"2001-01-01\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update user (both, nonsense) copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 409\"] = responseCode.code === 409;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response should have correct message\"] = jsonBody.message === \"Loan date must be before the return date\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": \"2008-02-02\",\n\t\"returnDate\": \"2003-03-03\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update loan (only returndate, correct)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"returnDate\": \"2100-01-01\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update loan (invalid loandate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": \"invalid date\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update loan (invalid returndate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 412\"] = responseCode.code === 412;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"Validation error. Invalid input\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"returnDate\": \"invalid date\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update loan (null loanDate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": null\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update loan (null returnDate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"returnDate\": null\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update loan (empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update loan (only loandate)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"LoanDate\": \"2000-01-01\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify partial update (loan date)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedLoan = {",
											"    \"book\": {",
											"        \"id\": parseInt(pm.environment.get(\"bookID\"))",
											"    },",
											"    \"loanDate\": \"2000-01-01T00:00:00\",",
											"    \"returnDate\": null",
											"};",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response should have non-empty items list\"] = jsonBody.items.length === 1;",
											"tests[\"Response should have correct book\"] = jsonBody.items[0].book.id === expectedLoan.book.id;",
											"tests[\"Response should have correct loan date\"] = jsonBody.items[0].loanDate === expectedLoan.loanDate;",
											"tests[\"Response should have correct return date\"] = jsonBody.items[0].returnDate === expectedLoan.returnDate;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update loan (both)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": \"2002-02-02\",\n\t\"returnDate\": \"2003-03-03\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Verify full update",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has empty items\"] = jsonBody.items.length === 0;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Partially update loan (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User does not have the book loaned\";"
										]
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"loanDate\": \"2002-02-02\",\n\t\"returnDate\": null\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get all loans for user",
					"description": "",
					"item": [
						{
							"name": "Add loan 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"1"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"2"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"3"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"4"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"5"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get all loans for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Get all loans for user pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct item array size\"] = jsonBody.items.length === 2;",
											"tests[\"Response body has correct first item\"] = jsonBody.items[0].book.id === 3;",
											"tests[\"Response body has correct last item\"] = jsonBody.items[jsonBody.items.length-1].book.id === 2;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.paging.pageNumber === 2;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.paging.pageMaxSize === 2;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books?pageNumber=2&pageSize=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "2",
											"equals": true
										},
										{
											"key": "pageSize",
											"value": "2",
											"equals": true
										}
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete user and book",
					"description": "",
					"item": [
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete book",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Loan history",
			"description": "",
			"item": [
				{
					"name": "User",
					"description": "",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"  \"name\": \"Postman User\",",
											"  \"email\": \"user@postman\" + pm.environment.get(\"randomNum\") + \".com\",",
											"  \"address\": \"123 Postman\"",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;",
											"",
											"pm.environment.set(\"userID\", jsonBody.id);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"randomNum\", Math.floor(Math.random() * 1000000));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get loan history (empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"    \"name\": \"Postman User\",",
											"    \"email\": \"user@postman\" + pm.environment.get(\"randomNum\") + \".com\",",
											"    \"address\": \"123 Postman\"",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;",
											"tests[\"Response body has correct empty loan history\"] = jsonBody.loanHistory.items.length === 0;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"1"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"2"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"3"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"4"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"5"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get loan history (verify)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"    \"name\": \"Postman User\",",
											"    \"email\": \"user@postman\" + pm.environment.get(\"randomNum\") + \".com\",",
											"    \"address\": \"123 Postman\"",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;",
											"tests[\"Response body has correct non-empty loan history\"] = jsonBody.loanHistory.items.length === 5;",
											"tests[\"Response body has correct first item in loan history\"] = jsonBody.loanHistory.items[0].book.id === 5;",
											"tests[\"Response body has correct last item in loan history\"] = jsonBody.loanHistory.items[jsonBody.loanHistory.items.length-1].book.id === 1;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.loanHistory.paging.pageNumber === 1;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.loanHistory.paging.pageMaxSize === 50;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get loan history (verify pagination)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"    \"name\": \"Postman User\",",
											"    \"email\": \"user@postman\" + pm.environment.get(\"randomNum\") + \".com\",",
											"    \"address\": \"123 Postman\"",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;",
											"tests[\"Response body has correct non-empty loan history\"] = jsonBody.loanHistory.items.length === 2;",
											"tests[\"Response body has correct first item in loan history\"] = jsonBody.loanHistory.items[0].book.id === 3;",
											"tests[\"Response body has correct last item in loan history\"] = jsonBody.loanHistory.items[jsonBody.loanHistory.items.length-1].book.id === 2;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.loanHistory.paging.pageNumber === 2;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.loanHistory.paging.pageMaxSize === 2;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}?pageNumber=2&pageSize=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "2",
											"equals": true
										},
										{
											"key": "pageSize",
											"value": "2",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Return loan 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"1"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Return loan 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"2"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Return loan 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"3"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Return loan 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"4"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Return loan 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"5"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get loan history (verify)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"    \"name\": \"Postman User\",",
											"    \"email\": \"user@postman\" + pm.environment.get(\"randomNum\") + \".com\",",
											"    \"address\": \"123 Postman\"",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;",
											"tests[\"Response body has correct non-empty loan history\"] = jsonBody.loanHistory.items.length === 5;",
											"tests[\"Response body has correct first item in loan history\"] = jsonBody.loanHistory.items[0].book.id === 5;",
											"tests[\"Response body has correct last item in loan history\"] = jsonBody.loanHistory.items[jsonBody.loanHistory.items.length-1].book.id === 1;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.loanHistory.paging.pageNumber === 1;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.loanHistory.paging.pageMaxSize === 50;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get loan history (verify pagination)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"    \"name\": \"Postman User\",",
											"    \"email\": \"user@postman\" + pm.environment.get(\"randomNum\") + \".com\",",
											"    \"address\": \"123 Postman\"",
											"}",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;",
											"tests[\"Response body has correct non-empty loan history\"] = jsonBody.loanHistory.items.length === 2;",
											"tests[\"Response body has correct first item in loan history\"] = jsonBody.loanHistory.items[0].book.id === 3;",
											"tests[\"Response body has correct last item in loan history\"] = jsonBody.loanHistory.items[jsonBody.loanHistory.items.length-1].book.id === 2;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.loanHistory.paging.pageNumber === 2;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.loanHistory.paging.pageMaxSize === 2;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}?pageNumber=2&pageSize=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "2",
											"equals": true
										},
										{
											"key": "pageSize",
											"value": "2",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Book",
					"description": "",
					"item": [
						{
							"name": "Create book",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman title\",",
											"    \"author\": \"Postman author\",",
											"    \"publishDate\": \"1963-05-22T00:00:00\",",
											"    \"isbn\": \"069235597-9\" + pm.environment.get(\"randomNum\")",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;",
											"",
											"pm.environment.set(\"bookID\", jsonBody.id);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"randomNum\", Math.floor(Math.random() * 1000000));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Postman title\",\n    \"author\": \"Postman author\",\n    \"publishDate\": \"1963-05-22T00:00:00\",\n    \"isbn\": \"069235597-9{{randomNum}}\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get loan history (empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman title\",",
											"    \"author\": \"Postman author\",",
											"    \"publishDate\": \"1963-05-22T00:00:00\",",
											"    \"isbn\": \"069235597-9\" + pm.environment.get(\"randomNum\")",
											"};",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;",
											"tests[\"Response body has correct empty loan history\"] = jsonBody.loanHistory.items.length === 0;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/2/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"2",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/3/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"3",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/4/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"4",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Add loan 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/5/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"5",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get loan history (verify)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman title\",",
											"    \"author\": \"Postman author\",",
											"    \"publishDate\": \"1963-05-22T00:00:00\",",
											"    \"isbn\": \"069235597-9\" + pm.environment.get(\"randomNum\")",
											"};",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;",
											"tests[\"Response body has correct non-empty loan history\"] = jsonBody.loanHistory.items.length === 5;",
											"tests[\"Response body has correct first item in loan history\"] = jsonBody.loanHistory.items[0].user.id === 5;",
											"tests[\"Response body has correct last item in loan history\"] = jsonBody.loanHistory.items[jsonBody.loanHistory.items.length-1].user.id === 1;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.loanHistory.paging.pageNumber === 1;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.loanHistory.paging.pageMaxSize === 50;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get loan history (verify pagination)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman title\",",
											"    \"author\": \"Postman author\",",
											"    \"publishDate\": \"1963-05-22T00:00:00\",",
											"    \"isbn\": \"069235597-9\" + pm.environment.get(\"randomNum\")",
											"};",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;",
											"tests[\"Response body has correct non-empty loan history\"] = jsonBody.loanHistory.items.length === 2;",
											"tests[\"Response body has correct first item in loan history\"] = jsonBody.loanHistory.items[0].user.id === 3;",
											"tests[\"Response body has correct last item in loan history\"] = jsonBody.loanHistory.items[jsonBody.loanHistory.items.length-1].user.id === 2;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.loanHistory.paging.pageNumber === 2;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.loanHistory.paging.pageMaxSize === 2;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}?pageNumber=2&pageSize=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "2",
											"equals": true
										},
										{
											"key": "pageSize",
											"value": "2",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Return loan 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Return loan 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/2/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"2",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Return loan 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/3/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"3",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Return loan 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/4/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"4",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Return loan 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/5/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"5",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get loan history (verify)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman title\",",
											"    \"author\": \"Postman author\",",
											"    \"publishDate\": \"1963-05-22T00:00:00\",",
											"    \"isbn\": \"069235597-9\" + pm.environment.get(\"randomNum\")",
											"};",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;",
											"tests[\"Response body has correct non-empty loan history\"] = jsonBody.loanHistory.items.length === 5;",
											"tests[\"Response body has correct first item in loan history\"] = jsonBody.loanHistory.items[0].user.id === 5;",
											"tests[\"Response body has correct last item in loan history\"] = jsonBody.loanHistory.items[jsonBody.loanHistory.items.length-1].user.id === 1;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.loanHistory.paging.pageNumber === 1;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.loanHistory.paging.pageMaxSize === 50;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get loan history (verify pagination)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedBook = {",
											"    \"title\": \"Postman title\",",
											"    \"author\": \"Postman author\",",
											"    \"publishDate\": \"1963-05-22T00:00:00\",",
											"    \"isbn\": \"069235597-9\" + pm.environment.get(\"randomNum\")",
											"};",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct title\"] = jsonBody.title === expectedBook.title;",
											"tests[\"Response body has correct author\"] = jsonBody.author === expectedBook.author;",
											"tests[\"Response body has correct publish date\"] = jsonBody.publishDate === expectedBook.publishDate;",
											"tests[\"Response body has correct ISBN\"] = jsonBody.isbn === expectedBook.isbn;",
											"tests[\"Response body has correct non-empty loan history\"] = jsonBody.loanHistory.items.length === 2;",
											"tests[\"Response body has correct first item in loan history\"] = jsonBody.loanHistory.items[0].user.id === 3;",
											"tests[\"Response body has correct last item in loan history\"] = jsonBody.loanHistory.items[jsonBody.loanHistory.items.length-1].user.id === 2;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.loanHistory.paging.pageNumber === 2;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.loanHistory.paging.pageMaxSize === 2;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}?pageNumber=2&pageSize=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "2",
											"equals": true
										},
										{
											"key": "pageSize",
											"value": "2",
											"equals": true
										}
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete book",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/books/{{bookID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books",
										"{{bookID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Reports",
			"description": "",
			"item": [
				{
					"name": "User",
					"description": "",
					"item": [
						{
							"name": "Get report (only date)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct page max size\"] = jsonBody.paging.pageMaxSize === 50;",
											"",
											"// Check loan date",
											"let loanDateValid = true;",
											"let loanDate = new Date(\"2016-12-24\");",
											"",
											"for (let i = 0; i < jsonBody.items.length && loanDateValid == true; i++)",
											"{",
											"    let loans = jsonBody.items[i].userLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        let date = new Date(loans[j].loanDate);",
											"        ",
											"        if (loanDate < date)",
											"        {",
											"            loanDateValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct loan dates\"] = loanDateValid === true;",
											"",
											"// Check return date",
											"let returnDateValid = true;",
											"",
											"for (let i = 0; i < jsonBody.items.length && returnDateValid === true; i++)",
											"{",
											"    let loans = jsonBody.items[i].userLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        if (loans[j].returnDate !== null)",
											"        {",
											"            returnDateValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct return dates\"] = returnDateValid === true;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users?loanDate=2016-12-24",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									],
									"query": [
										{
											"key": "loanDate",
											"value": "2016-12-24",
											"equals": true
										}
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Get report (only duration)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct page max size\"] = jsonBody.paging.pageMaxSize === 50;",
											"",
											"// Check return date",
											"let returnDateValid = true;",
											"",
											"for (let i = 0; i < jsonBody.items.length && returnDateValid === true; i++)",
											"{",
											"    let loans = jsonBody.items[i].userLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        if (loans[j].returnDate !== null)",
											"        {",
											"            returnDateValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct return dates\"] = returnDateValid === true;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users?duration=30",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									],
									"query": [
										{
											"key": "duration",
											"value": "30",
											"equals": true
										}
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Get report (both)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct page max size\"] = jsonBody.paging.pageMaxSize === 50;",
											"",
											"// Check loan date",
											"let loanDateValid = true;",
											"let loanDate = new Date(\"2016-12-24\");",
											"",
											"for (let i = 0; i < jsonBody.items.length && loanDateValid === true; i++)",
											"{",
											"    let loans = jsonBody.items[i].userLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        let date = new Date(loans[j].loanDate);",
											"        ",
											"        if (loanDate < date)",
											"        {",
											"            loanDateValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct loan dates\"] = loanDateValid === true;",
											"",
											"// Check return date",
											"let returnDateValid = true;",
											"",
											"for (let i = 0; i < jsonBody.items.length && returnDateValid === true; i++)",
											"{",
											"    let loans = jsonBody.items[i].userLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        if (loans[j].returnDate !== null)",
											"        {",
											"            returnDateValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct return dates\"] = returnDateValid === true;",
											"",
											"// Check return date",
											"let durationValid = true;",
											"let oneDay = 24*60*60*1000;",
											"",
											"for (let i = 0; i < jsonBody.items.length && durationValid === true; i++)",
											"{",
											"    let loans = jsonBody.items[i].userLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        let date = new Date(loans[j].loanDate);",
											"        ",
											"        let diffDays = Math.round(Math.abs((date.getTime() - loanDate.getTime())/(oneDay)));",
											"        ",
											"        if (diffDays < 30)",
											"        {",
											"            durationValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct duration\"] = durationValid === true;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users?loanDate=2016-12-24&duration=30",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									],
									"query": [
										{
											"key": "loanDate",
											"value": "2016-12-24",
											"equals": true
										},
										{
											"key": "duration",
											"value": "30",
											"equals": true
										}
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Get report pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct item array size\"] = jsonBody.items.length === 3;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.paging.pageNumber === 2;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.paging.pageMaxSize === 3;",
											"",
											"// Check loan date",
											"let loanDateValid = true;",
											"let loanDate = new Date(\"2016-12-24\");",
											"",
											"for (let i = 0; i < jsonBody.items.length && loanDateValid === true; i++)",
											"{",
											"    let loans = jsonBody.items[i].userLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        let date = new Date(loans[j].loanDate);",
											"        ",
											"        if (loanDate < date)",
											"        {",
											"            loanDateValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct loan dates\"] = loanDateValid === true;",
											"",
											"// Check return date",
											"let returnDateValid = true;",
											"",
											"for (let i = 0; i < jsonBody.items.length && returnDateValid === true; i++)",
											"{",
											"    let loans = jsonBody.items[i].userLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        if (loans[j].returnDate !== null)",
											"        {",
											"            returnDateValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct return dates\"] = returnDateValid === true;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users?loanDate=2016-12-24&duration=30&pageNumber=2&pageSize=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									],
									"query": [
										{
											"key": "loanDate",
											"value": "2016-12-24",
											"equals": true
										},
										{
											"key": "duration",
											"value": "30",
											"equals": true
										},
										{
											"key": "pageNumber",
											"value": "2",
											"equals": true
										},
										{
											"key": "pageSize",
											"value": "3",
											"equals": true
										}
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Book",
					"description": "",
					"item": [
						{
							"name": "Get report (only date)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct page max size\"] = jsonBody.paging.pageMaxSize === 50;",
											"",
											"// Check loan date",
											"let loanDateValid = true;",
											"let loanDate = new Date(\"2016-12-24\");",
											"",
											"for (let i = 0; i < jsonBody.items.length && loanDateValid === true; i++)",
											"{",
											"    let loans = jsonBody.items[i].bookLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        let date = new Date(loans[j].loanDate);",
											"        ",
											"        if (loanDate < date)",
											"        {",
											"            loanDateValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct loan dates\"] = loanDateValid === true;",
											"",
											"// Check return date",
											"let returnDateValid = true;",
											"",
											"for (let i = 0; i < jsonBody.items.length && returnDateValid === true; i++)",
											"{",
											"    let loans = jsonBody.items[i].bookLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        if (loans[j].returnDate !== null)",
											"        {",
											"            returnDateValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct return dates\"] = returnDateValid === true;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/books?loanDate=2016-12-24",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									],
									"query": [
										{
											"key": "loanDate",
											"value": "2016-12-24",
											"equals": true
										}
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Get report (only duration)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct page max size\"] = jsonBody.paging.pageMaxSize === 50;",
											"",
											"// Check return date",
											"let returnDateValid = true;",
											"",
											"for (let i = 0; i < jsonBody.items.length && returnDateValid === true; i++)",
											"{",
											"    let loans = jsonBody.items[i].bookLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        if (loans[j].returnDate !== null)",
											"        {",
											"            returnDateValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct return dates\"] = returnDateValid === true;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/books?duration=30",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									],
									"query": [
										{
											"key": "duration",
											"value": "30",
											"equals": true
										}
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Get report (both)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct page max size\"] = jsonBody.paging.pageMaxSize === 50;",
											"",
											"// Check loan date",
											"let loanDateValid = true;",
											"let loanDate = new Date(\"2016-12-24\");",
											"",
											"for (let i = 0; i < jsonBody.items.length && loanDateValid === true; i++)",
											"{",
											"    let loans = jsonBody.items[i].bookLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        let date = new Date(loans[j].bookLoans);",
											"        ",
											"        if (loanDate < date)",
											"        {",
											"            loanDateValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct loan dates\"] = loanDateValid === true;",
											"",
											"// Check return date",
											"let returnDateValid = true;",
											"",
											"for (let i = 0; i < jsonBody.items.length && returnDateValid === true; i++)",
											"{",
											"    let loans = jsonBody.items[i].bookLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        if (loans[j].returnDate !== null)",
											"        {",
											"            returnDateValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct return dates\"] = returnDateValid === true;",
											"",
											"// Check return date",
											"let durationValid = true;",
											"let oneDay = 24*60*60*1000;",
											"",
											"for (let i = 0; i < jsonBody.items.length && durationValid === true; i++)",
											"{",
											"    let loans = jsonBody.items[i].bookLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        let date = new Date(loans[j].loanDate);",
											"        ",
											"        let diffDays = Math.round(Math.abs((date.getTime() - loanDate.getTime())/(oneDay)));",
											"        ",
											"        if (diffDays < 30)",
											"        {",
											"            durationValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct duration\"] = durationValid === true;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/books?loanDate=2016-12-24&duration=30",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									],
									"query": [
										{
											"key": "loanDate",
											"value": "2016-12-24",
											"equals": true
										},
										{
											"key": "duration",
											"value": "30",
											"equals": true
										}
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Get report pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct item array size\"] = jsonBody.items.length === 3;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.paging.pageNumber === 2;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.paging.pageMaxSize === 3;",
											"",
											"// Check loan date",
											"let loanDateValid = true;",
											"let loanDate = new Date(\"2016-12-24\");",
											"",
											"for (let i = 0; i < jsonBody.items.length && loanDateValid === true; i++)",
											"{",
											"    let loans = jsonBody.items[i].bookLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        let date = new Date(loans[j].loanDate);",
											"        ",
											"        if (loanDate < date)",
											"        {",
											"            loanDateValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct loan dates\"] = loanDateValid === true;",
											"",
											"// Check return date",
											"let returnDateValid = true;",
											"",
											"for (let i = 0; i < jsonBody.items.length && returnDateValid === true; i++)",
											"{",
											"    let loans = jsonBody.items[i].bookLoans;",
											"    ",
											"    for (let j = 0; j < loans.length; j++)",
											"    {",
											"        if (loans[j].returnDate !== null)",
											"        {",
											"            returnDateValid = false;",
											"            break;",
											"        }",
											"    }",
											"}",
											"",
											"tests[\"Response body has correct return dates\"] = returnDateValid === true;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/books?loanDate=2016-12-24&duration=30&pageNumber=2&pageSize=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"books"
									],
									"query": [
										{
											"key": "loanDate",
											"value": "2016-12-24",
											"equals": true
										},
										{
											"key": "duration",
											"value": "30",
											"equals": true
										},
										{
											"key": "pageNumber",
											"value": "2",
											"equals": true
										},
										{
											"key": "pageSize",
											"value": "3",
											"equals": true
										}
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Recommendations",
			"description": "",
			"item": [
				{
					"name": "Add reviews",
					"description": "",
					"item": [
						{
							"name": "Create review 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 1\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/1/reviews/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"1",
										"reviews",
										"1"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 2\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/2/reviews/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"2",
										"reviews",
										"1"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 3\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/3/reviews/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"3",
										"reviews",
										"3"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create review 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 4\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/4/reviews/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"4",
										"reviews",
										"3"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "User recommendations",
					"description": "",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var expectedUser = {",
											"  \"name\": \"Postman User\",",
											"  \"email\": \"user@postman\" + pm.environment.get(\"randomNum\") + \".com\",",
											"  \"address\": \"123 Postman\"",
											"};",
											"",
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct name\"] = jsonBody.name === expectedUser.name;",
											"tests[\"Response body has correct email\"] = jsonBody.email === expectedUser.email;",
											"tests[\"Response body has correct address\"] = jsonBody.address === expectedUser.address;",
											"",
											"pm.environment.set(\"userID\", jsonBody.id);"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"randomNum\", Math.floor(Math.random() * 1000000));"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"Postman User\",\n  \"Email\": \"user@postman{{randomNum}}.com\",\n  \"Address\": \"123 Postman\"\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get recommendations (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct message\"] = jsonBody.message === \"User not found\";"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/0/recommendations",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"0",
										"recommendations"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Get recommendations",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct item size\"] = jsonBody.items.length === 50;",
											"",
											"let previousRating = 10;",
											"let nullReached = false;",
											"let inOrder = true;",
											"",
											"for (let i = 0; i < jsonBody.items.length; i++)",
											"{",
											"    ",
											"    if (jsonBody.items[i].averageRating === null && nullReached === false)",
											"    {",
											"        nullReached = true;",
											"    }",
											"    else if ((jsonBody.items[i].averageRating !== null && nullReached === true)",
											"            || (previousRating < jsonBody.items[i].averageRating))",
											"    {",
											"        inOrder = false;",
											"        break;",
											"    }",
											"    ",
											"    previousRating = jsonBody.items[i].averageRating;",
											"}",
											"",
											"tests[\"Response body has correct rating order\"] = inOrder === true;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/recommendations",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"recommendations"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Get recommendations pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct item array size\"] = jsonBody.items.length === 25;",
											"tests[\"Response body has correct pagination page number\"] = jsonBody.paging.pageNumber === 2;",
											"tests[\"Response body has correct pagination page size\"] = jsonBody.paging.pageMaxSize === 25;",
											"",
											"let previousRating = 10;",
											"let nullReached = false;",
											"let inOrder = true;",
											"",
											"for (let i = 0; i < jsonBody.items.length; i++)",
											"{",
											"    ",
											"    if (jsonBody.items[i].averageRating === null && nullReached === false)",
											"    {",
											"        nullReached = true;",
											"    }",
											"    else if ((jsonBody.items[i].averageRating !== null && nullReached === true)",
											"            || (previousRating < jsonBody.items[i].averageRating))",
											"    {",
											"        inOrder = false;",
											"        break;",
											"    }",
											"    ",
											"    previousRating = jsonBody.items[i].averageRating;",
											"}",
											"",
											"tests[\"Response body has correct rating order\"] = inOrder === true;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/recommendations?pageNumber=2&pageSize=25",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"recommendations"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "2",
											"equals": true
										},
										{
											"key": "pageSize",
											"value": "25",
											"equals": true
										}
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Add loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"1"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get recommendations (not loan)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct item size\"] = jsonBody.items.length === 50;",
											"",
											"let loanBookID = 1;",
											"let bookFound = false;",
											"",
											"for (let i = 0; i < jsonBody.items.length; i++)",
											"{",
											"    if (jsonBody.items[i].book.id === loanBookID)",
											"    {",
											"        bookFound = true;",
											"        break;",
											"    }",
											"}",
											"",
											"tests[\"Response body does not have loaned book\"] = bookFound === false;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/recommendations",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"recommendations"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Return book",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/books/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"books",
										"1"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get recommendations (not return)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct item size\"] = jsonBody.items.length === 50;",
											"",
											"let returnBookID = 1;",
											"let bookFound = false;",
											"",
											"for (let i = 0; i < jsonBody.items.length; i++)",
											"{",
											"    if (jsonBody.items[i].book.id === returnBookID)",
											"    {",
											"        bookFound = true;",
											"        break;",
											"    }",
											"}",
											"",
											"tests[\"Response body does not have returned book\"] = bookFound === false;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/recommendations",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"recommendations"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Create review",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 5\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"3"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get recommendations (not review)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct item size\"] = jsonBody.items.length === 50;",
											"",
											"let reviewBookID = 3;",
											"let bookFound = false;",
											"",
											"for (let i = 0; i < jsonBody.items.length; i++)",
											"{",
											"    if (jsonBody.items[i].book.id === reviewBookID)",
											"    {",
											"        bookFound = true;",
											"        break;",
											"    }",
											"}",
											"",
											"tests[\"Response body does not have reviewed book\"] = bookFound === false;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/recommendations",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"recommendations"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Delete review",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/reviews/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"reviews",
										"3"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get recommendations (review)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Response should be non-empty\"] = (responseBody !== null && responseBody.length !== 0);",
											"",
											"var jsonBody = JSON.parse(responseBody);",
											"",
											"tests[\"Response body has correct item size\"] = jsonBody.items.length === 50;",
											"",
											"let reviewBookID = 3;",
											"let bookFound = false;",
											"",
											"for (let i = 0; i < jsonBody.items.length; i++)",
											"{",
											"    if (jsonBody.items[i].book.id === reviewBookID)",
											"    {",
											"        bookFound = true;",
											"        break;",
											"    }",
											"}",
											"",
											"tests[\"Response body does have book for deleted reviewed\"] = bookFound === true;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}/recommendations",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}",
										"recommendations"
									]
								},
								"description": "Should return a non-empty list"
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be non-empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/{{userID}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userID}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete reviews",
					"description": "",
					"item": [
						{
							"name": "Delete review 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 1\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/1/reviews/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"1",
										"reviews",
										"1"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete review 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 2\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/2/reviews/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"2",
										"reviews",
										"1"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete review 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 3\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/3/reviews/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"3",
										"reviews",
										"3"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Delete review 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;",
											"tests[\"Response should be empty\"] = (responseBody === null || responseBody.length === 0);"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"rating\": 4\n}"
								},
								"url": {
									"raw": "http://localhost:5000/api/v1/users/4/reviews/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1",
										"users",
										"4",
										"reviews",
										"3"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}